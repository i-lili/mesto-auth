{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  // Приватный метод для получения ответа от сервера в формате JSON.\n  _getJson(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Метод для получения карточек с сервера.\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._getJson);\n  }\n\n  // Метод для получения информации о пользователе с сервера.\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._getJson);\n  }\n\n  // Метод для обновления информации о пользователе на сервере.\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._getJson);\n  }\n\n  // Метод для добавления новой карточки на сервер.\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._getJson);\n  }\n\n  // Метод для удаления карточки с сервера.\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._getJson);\n  }\n\n  // Метод для изменения статуса лайка карточки на сервере.\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: this._headers\n    }).then(this._getJson);\n  }\n\n  // Метод для обновления аватара пользователя\n  updateAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._getJson);\n  }\n}\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-61\",\n  headers: {\n    authorization: \"d14f3df3-8e7d-4c23-be34-6e27c8e1960e\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_getJson","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","editUserInfo","data","method","body","JSON","stringify","name","about","addNewCard","link","deleteCard","cardId","changeLikeCardStatus","isLiked","updateAvatar","avatar","api","authorization"],"sources":["/Users/lilaismailova/dev/mesto-react/mesto/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  // Приватный метод для получения ответа от сервера в формате JSON.\n  _getJson(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Метод для получения карточек с сервера.\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для получения информации о пользователе с сервера.\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для обновления информации о пользователе на сервере.\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then(this._getJson);\n  }\n\n  // Метод для добавления новой карточки на сервер.\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then(this._getJson);\n  }\n\n  // Метод для удаления карточки с сервера.\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для изменения статуса лайка карточки на сервере.\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для обновления аватара пользователя\n  updateAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar,\n      }),\n    }).then(this._getJson);\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-61\",\n  headers: {\n    authorization: \"d14f3df3-8e7d-4c23-be34-6e27c8e1960e\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}