{"ast":null,"code":"import _classCallCheck from\"/Users/lilaismailova/mesto-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/lilaismailova/mesto-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";var Api=/*#__PURE__*/function(){function Api(options){_classCallCheck(this,Api);this._baseUrl=options.baseUrl;this._headers=options.headers;}// Приватный метод для получения ответа от сервера в формате JSON.\n_createClass(Api,[{key:\"_getJson\",value:function _getJson(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));}// Метод для получения карточек с сервера.\n},{key:\"getInitialCards\",value:function getInitialCards(){return fetch(\"\".concat(this._baseUrl,\"/cards\"),{headers:this._headers}).then(this._getJson);}// Метод для получения информации о пользователе с сервера.\n},{key:\"getUserInfo\",value:function getUserInfo(){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{headers:this._headers}).then(this._getJson);}// Метод для обновления информации о пользователе на сервере.\n},{key:\"editUserInfo\",value:function editUserInfo(data){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{method:\"PATCH\",headers:this._headers,body:JSON.stringify({name:data.name,about:data.about})}).then(this._getJson);}// Метод для добавления новой карточки на сервер.\n},{key:\"addNewCard\",value:function addNewCard(data){return fetch(\"\".concat(this._baseUrl,\"/cards\"),{method:\"POST\",headers:this._headers,body:JSON.stringify({name:data.name,link:data.link})}).then(this._getJson);}// Метод для удаления карточки с сервера.\n},{key:\"deleteCard\",value:function deleteCard(cardId){return fetch(\"\".concat(this._baseUrl,\"/cards/\").concat(cardId),{method:\"DELETE\",headers:this._headers}).then(this._getJson);}// Метод для изменения статуса лайка карточки на сервере.\n},{key:\"changeLikeCardStatus\",value:function changeLikeCardStatus(cardId,isLiked){return fetch(\"\".concat(this._baseUrl,\"/cards/likes/\").concat(cardId),{method:isLiked?\"PUT\":\"DELETE\",headers:this._headers}).then(this._getJson);}// Метод для обновления аватара пользователя\n},{key:\"updateAvatar\",value:function updateAvatar(avatar){return fetch(\"\".concat(this._baseUrl,\"/users/me/avatar\"),{method:\"PATCH\",headers:this._headers,body:JSON.stringify({avatar:avatar})}).then(this._getJson);}}]);return Api;}();var api=new Api({baseUrl:\"https://mesto.nomoreparties.co/v1/cohort-61\",headers:{authorization:\"d14f3df3-8e7d-4c23-be34-6e27c8e1960e\",\"Content-Type\":\"application/json\"}});export default api;","map":{"version":3,"names":["Api","options","_classCallCheck","_baseUrl","baseUrl","_headers","headers","_createClass","key","value","_getJson","res","ok","json","Promise","reject","concat","status","getInitialCards","fetch","then","getUserInfo","editUserInfo","data","method","body","JSON","stringify","name","about","addNewCard","link","deleteCard","cardId","changeLikeCardStatus","isLiked","updateAvatar","avatar","api","authorization"],"sources":["/Users/lilaismailova/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  // Приватный метод для получения ответа от сервера в формате JSON.\n  _getJson(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Метод для получения карточек с сервера.\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для получения информации о пользователе с сервера.\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для обновления информации о пользователе на сервере.\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then(this._getJson);\n  }\n\n  // Метод для добавления новой карточки на сервер.\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then(this._getJson);\n  }\n\n  // Метод для удаления карточки с сервера.\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для изменения статуса лайка карточки на сервере.\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: this._headers,\n    }).then(this._getJson);\n  }\n\n  // Метод для обновления аватара пользователя\n  updateAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar,\n      }),\n    }).then(this._getJson);\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-61\",\n  headers: {\n    authorization: \"d14f3df3-8e7d-4c23-be34-6e27c8e1960e\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}